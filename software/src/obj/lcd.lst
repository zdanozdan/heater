                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.4.0 Thu Feb 10 12:42:26 2011
                              4 
                              5 ;--------------------------------------------------------
                              6 	.module src/lcd
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _enable
                             13 	.globl _lcd_delay
                             14 	.globl _lcd_goto_xy
                             15 	.globl _lcd_put
                             16 	.globl _lcd_clear
                             17 	.globl _lcd_home
                             18 	.globl _putchar
                             19 	.globl _lcd_put_string
                             20 	.globl _lcd_cursor_on
                             21 	.globl _lcd_cursor_off
                             22 	.globl _lcd_init
                             23 ;--------------------------------------------------------
                             24 ; special function registers
                             25 ;--------------------------------------------------------
                    0080     26 _P0	=	0x0080
                    0081     27 _SP	=	0x0081
                    0082     28 _DPL	=	0x0082
                    0083     29 _DPH	=	0x0083
                    0087     30 _PCON	=	0x0087
                    0088     31 _TCON	=	0x0088
                    0089     32 _TMOD	=	0x0089
                    008A     33 _TL0	=	0x008a
                    008B     34 _TL1	=	0x008b
                    008C     35 _TH0	=	0x008c
                    008D     36 _TH1	=	0x008d
                    0090     37 _P1	=	0x0090
                    0098     38 _SCON	=	0x0098
                    0099     39 _SBUF	=	0x0099
                    00A0     40 _P2	=	0x00a0
                    00B0     41 _P3	=	0x00b0
                    00B8     42 _IP	=	0x00b8
                    00C8     43 _T2CON	=	0x00c8
                    00C9     44 _T2MOD	=	0x00c9
                    00CA     45 _RCAP2L	=	0x00ca
                    00CB     46 _RCAP2H	=	0x00cb
                    00CC     47 _TL2	=	0x00cc
                    00CD     48 _TH2	=	0x00cd
                    00D0     49 _PSW	=	0x00d0
                    00E0     50 _A	=	0x00e0
                    00A6     51 _WDTRST	=	0x00a6
                    00A7     52 _WDTPRG	=	0x00a7
                    00A2     53 _AUXR1	=	0x00a2
                    008E     54 _AUXR	=	0x008e
                    00B9     55 _SADEN	=	0x00b9
                    00BA     56 _SADEN_1	=	0x00ba
                    00B7     57 _IPH	=	0x00b7
                    00B7     58 _IPH0	=	0x00b7
                    00B8     59 _IPL	=	0x00b8
                    00B8     60 _IPL0	=	0x00b8
                    00A8     61 _IE	=	0x00a8
                    00A9     62 _SADDR	=	0x00a9
                    00AA     63 _SADDR_1	=	0x00aa
                    00D8     64 _CCON	=	0x00d8
                    00D9     65 _CMOD	=	0x00d9
                    00DA     66 _CCAPM0	=	0x00da
                    00DB     67 _CCAPM1	=	0x00db
                    00DC     68 _CCAPM2	=	0x00dc
                    00DD     69 _CCAPM3	=	0x00dd
                    00DE     70 _CCAPM4	=	0x00de
                    00E9     71 _CL	=	0x00e9
                    00EA     72 _CCAP0L	=	0x00ea
                    00EB     73 _CCAP1L	=	0x00eb
                    00EC     74 _CCAP2L	=	0x00ec
                    00ED     75 _CCAP3L	=	0x00ed
                    00EE     76 _CCAP4L	=	0x00ee
                    00E0     77 _ACC	=	0x00e0
                    00F0     78 _B	=	0x00f0
                    00F9     79 _CH	=	0x00f9
                    00FA     80 _CCAP0H	=	0x00fa
                    00FB     81 _CCAP1H	=	0x00fb
                    00FC     82 _CCAP2H	=	0x00fc
                    00FD     83 _CCAP3H	=	0x00fd
                    00FE     84 _CCAP4H	=	0x00fe
                    00FF     85 _ICON	=	0x00ff
                    0085     86 _CKSEL	=	0x0085
                    0086     87 _OSCCON	=	0x0086
                    00D1     88 _FCON	=	0x00d1
                    00D2     89 _EECON	=	0x00d2
                    00D3     90 _EETIM	=	0x00d3
                             91 ;--------------------------------------------------------
                             92 ; special function bits 
                             93 ;--------------------------------------------------------
                    0080     94 _P0_0	=	0x0080
                    0081     95 _P0_1	=	0x0081
                    0082     96 _P0_2	=	0x0082
                    0083     97 _P0_3	=	0x0083
                    0084     98 _P0_4	=	0x0084
                    0085     99 _P0_5	=	0x0085
                    0086    100 _P0_6	=	0x0086
                    0087    101 _P0_7	=	0x0087
                    00A7    102 _ENBOOT	=	0x00a7
                    0088    103 _IT0	=	0x0088
                    0089    104 _IE0	=	0x0089
                    008A    105 _IT1	=	0x008a
                    008B    106 _IE1	=	0x008b
                    008C    107 _TR0	=	0x008c
                    008D    108 _TF0	=	0x008d
                    008E    109 _TR1	=	0x008e
                    008F    110 _TF1	=	0x008f
                    0090    111 _P1_0	=	0x0090
                    0091    112 _P1_1	=	0x0091
                    0092    113 _P1_2	=	0x0092
                    0093    114 _P1_3	=	0x0093
                    0094    115 _P1_4	=	0x0094
                    0095    116 _P1_5	=	0x0095
                    0096    117 _P1_6	=	0x0096
                    0097    118 _P1_7	=	0x0097
                    0090    119 _T2	=	0x0090
                    0091    120 _T2EX	=	0x0091
                    0098    121 _RI	=	0x0098
                    0099    122 _TI	=	0x0099
                    009A    123 _RB8	=	0x009a
                    009B    124 _TB8	=	0x009b
                    009C    125 _REN	=	0x009c
                    009D    126 _SM2	=	0x009d
                    009E    127 _SM1	=	0x009e
                    009F    128 _SM0	=	0x009f
                    00A0    129 _P2_0	=	0x00a0
                    00A1    130 _P2_1	=	0x00a1
                    00A2    131 _P2_2	=	0x00a2
                    00A3    132 _P2_3	=	0x00a3
                    00A4    133 _P2_4	=	0x00a4
                    00A5    134 _P2_5	=	0x00a5
                    00A6    135 _P2_6	=	0x00a6
                    00A7    136 _P2_7	=	0x00a7
                    00B0    137 _P3_0	=	0x00b0
                    00B1    138 _P3_1	=	0x00b1
                    00B2    139 _P3_2	=	0x00b2
                    00B3    140 _P3_3	=	0x00b3
                    00B4    141 _P3_4	=	0x00b4
                    00B5    142 _P3_5	=	0x00b5
                    00B6    143 _P3_6	=	0x00b6
                    00B7    144 _P3_7	=	0x00b7
                    00B0    145 _RXD	=	0x00b0
                    00B1    146 _TXD	=	0x00b1
                    00B2    147 _INT0	=	0x00b2
                    00B3    148 _INT1	=	0x00b3
                    00B4    149 _T0	=	0x00b4
                    00B5    150 _T1	=	0x00b5
                    00B6    151 _WR	=	0x00b6
                    00B7    152 _RD	=	0x00b7
                    00B8    153 _PX0	=	0x00b8
                    00B9    154 _PT0	=	0x00b9
                    00BA    155 _PX1	=	0x00ba
                    00BB    156 _PT1	=	0x00bb
                    00BC    157 _PS	=	0x00bc
                    00BD    158 _PT2	=	0x00bd
                    00C8    159 _T2CON_0	=	0x00c8
                    00C9    160 _T2CON_1	=	0x00c9
                    00CA    161 _T2CON_2	=	0x00ca
                    00CB    162 _T2CON_3	=	0x00cb
                    00CC    163 _T2CON_4	=	0x00cc
                    00CD    164 _T2CON_5	=	0x00cd
                    00CE    165 _T2CON_6	=	0x00ce
                    00CF    166 _T2CON_7	=	0x00cf
                    00C8    167 _CP_RL2	=	0x00c8
                    00C9    168 _C_T2	=	0x00c9
                    00CA    169 _TR2	=	0x00ca
                    00CB    170 _EXEN2	=	0x00cb
                    00CC    171 _TCLK	=	0x00cc
                    00CD    172 _RCLK	=	0x00cd
                    00CE    173 _EXF2	=	0x00ce
                    00CF    174 _TF2	=	0x00cf
                    00D0    175 _P	=	0x00d0
                    00D1    176 _FL	=	0x00d1
                    00D2    177 _OV	=	0x00d2
                    00D3    178 _RS0	=	0x00d3
                    00D4    179 _RS1	=	0x00d4
                    00D5    180 _F0	=	0x00d5
                    00D6    181 _AC	=	0x00d6
                    00D7    182 _CY	=	0x00d7
                    00AF    183 _EA	=	0x00af
                    00AE    184 _EC	=	0x00ae
                    00AD    185 _ET2	=	0x00ad
                    00AC    186 _ES	=	0x00ac
                    00AB    187 _ET1	=	0x00ab
                    00AA    188 _EX1	=	0x00aa
                    00A9    189 _ET0	=	0x00a9
                    00A8    190 _EX0	=	0x00a8
                    00DF    191 _CF	=	0x00df
                    00DE    192 _CR	=	0x00de
                    00DC    193 _CCF4	=	0x00dc
                    00DB    194 _CCF3	=	0x00db
                    00DA    195 _CCF2	=	0x00da
                    00D9    196 _CCF1	=	0x00d9
                    00D8    197 _CCF0	=	0x00d8
                            198 ;--------------------------------------------------------
                            199 ; overlayable register banks 
                            200 ;--------------------------------------------------------
                            201 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     202 	.ds 8
                            203 ;--------------------------------------------------------
                            204 ; internal ram data
                            205 ;--------------------------------------------------------
                            206 	.area DSEG    (DATA)
                            207 ;--------------------------------------------------------
                            208 ; overlayable items in internal ram 
                            209 ;--------------------------------------------------------
                            210 	.area OSEG    (OVR,DATA)
                            211 ;--------------------------------------------------------
                            212 ; indirectly addressable internal ram data
                            213 ;--------------------------------------------------------
                            214 	.area ISEG    (DATA)
                            215 ;--------------------------------------------------------
                            216 ; bit data
                            217 ;--------------------------------------------------------
                            218 	.area BSEG    (BIT)
                            219 ;--------------------------------------------------------
                            220 ; external ram data
                            221 ;--------------------------------------------------------
                            222 	.area XSEG    (XDATA)
                            223 ;--------------------------------------------------------
                            224 ; external initialized ram data
                            225 ;--------------------------------------------------------
                            226 	.area XISEG   (XDATA)
                            227 ;--------------------------------------------------------
                            228 ; global & static initialisations
                            229 ;--------------------------------------------------------
                            230 	.area GSINIT  (CODE)
                            231 	.area GSFINAL (CODE)
                            232 	.area GSINIT  (CODE)
                            233 ;--------------------------------------------------------
                            234 ; Home
                            235 ;--------------------------------------------------------
                            236 	.area HOME    (CODE)
                            237 	.area CSEG    (CODE)
                            238 ;--------------------------------------------------------
                            239 ; code
                            240 ;--------------------------------------------------------
                            241 	.area CSEG    (CODE)
                            242 ;------------------------------------------------------------
                            243 ;Allocation info for local variables in function 'lcd_delay'
                            244 ;------------------------------------------------------------
                            245 ;delay                     Allocated to registers r2 r3 
                            246 ;counter                   Allocated to registers 
                            247 ;------------------------------------------------------------
                            248 ;src/lcd.c:64: void lcd_delay ( int delay ) 
                            249 ;	-----------------------------------------
                            250 ;	 function lcd_delay
                            251 ;	-----------------------------------------
   0000                     252 _lcd_delay:
                    0002    253 	ar2 = 0x02
                    0003    254 	ar3 = 0x03
                    0004    255 	ar4 = 0x04
                    0005    256 	ar5 = 0x05
                    0006    257 	ar6 = 0x06
                    0007    258 	ar7 = 0x07
                    0000    259 	ar0 = 0x00
                    0001    260 	ar1 = 0x01
   0000 C0*00               261 	push	_bp
   0002 85 81*00            262 	mov	_bp,sp
                            263 ;     genReceive
   0005 AA 82               264 	mov	r2,dpl
   0007 AB 83               265 	mov	r3,dph
                            266 ;src/lcd.c:66: int counter = 0;
                            267 ;     genAssign
   0009 7C 00               268 	mov	r4,#0x00
   000B 7D 00               269 	mov	r5,#0x00
   000D                     270 00101$:
                            271 ;src/lcd.c:68: for ( ; counter < delay; counter++ )
                            272 ;     genCmpLt
                            273 ;     genCmp
   000D C3                  274 	clr	c
   000E EC                  275 	mov	a,r4
   000F 9A                  276 	subb	a,r2
   0010 ED                  277 	mov	a,r5
   0011 64 80               278 	xrl	a,#0x80
   0013 8B F0               279 	mov	b,r3
   0015 63 F0 80            280 	xrl	b,#0x80
   0018 95 F0               281 	subb	a,b
                            282 ;     genIfxJump
                            283 ;       Peephole 108    removed ljmp by inverse jump logic
   001A 50 0D               284 	jnc     00105$
   001C                     285 00109$:
                            286 ;src/lcd.c:70: SERVICE_WATCHDOG;
                            287 ;     genAssign
   001C 75 A6 1E            288 	mov	_WDTRST,#0x1E
                            289 ;     genAssign
   001F 75 A6 E1            290 	mov	_WDTRST,#0xE1
                            291 ;src/lcd.c:68: for ( ; counter < delay; counter++ )
                            292 ;     genPlus
                            293 ;     genPlusIncr
                            294 ;	tail increment optimized
   0022 0C                  295 	inc	r4
   0023 BC 00 E7            296 	cjne	r4,#0x00,00101$
   0026 0D                  297 	inc	r5
                            298 ;       Peephole 112.b  changed ljmp to sjmp
   0027 80 E4               299 	sjmp    00101$
   0029                     300 00105$:
   0029 85*00 81            301 	mov	sp,_bp
   002C D0*00               302 	pop	_bp
   002E 22                  303 	ret
                            304 ;------------------------------------------------------------
                            305 ;Allocation info for local variables in function 'enable'
                            306 ;------------------------------------------------------------
                            307 ;------------------------------------------------------------
                            308 ;src/lcd.c:74: void enable(void) 
                            309 ;	-----------------------------------------
                            310 ;	 function enable
                            311 ;	-----------------------------------------
   002F                     312 _enable:
   002F C0*00               313 	push	_bp
   0031 85 81*00            314 	mov	_bp,sp
                            315 ;src/lcd.c:76: LCD_E_BIT = 1;
                            316 ;     genAssign
   0034 D2 A4               317 	setb	_P2_4
                            318 ;src/lcd.c:77: lcd_delay(ENABLE_DELAY);
                            319 ;     genCall
                            320 ;       Peephole 182.b  used 16 bit load of dptr
   0036 90 01 2C            321 	mov     dptr,#0x012C
   0039 12s00r00            322 	lcall	_lcd_delay
                            323 ;src/lcd.c:78: LCD_E_BIT = 0;
                            324 ;     genAssign
   003C C2 A4               325 	clr	_P2_4
                            326 ;src/lcd.c:79: lcd_delay(ENABLE_DELAY);
                            327 ;     genCall
                            328 ;       Peephole 182.b  used 16 bit load of dptr
   003E 90 01 2C            329 	mov     dptr,#0x012C
   0041 12s00r00            330 	lcall	_lcd_delay
   0044                     331 00101$:
   0044 85*00 81            332 	mov	sp,_bp
   0047 D0*00               333 	pop	_bp
   0049 22                  334 	ret
                            335 ;------------------------------------------------------------
                            336 ;Allocation info for local variables in function 'lcd_goto_xy'
                            337 ;------------------------------------------------------------
                            338 ;y                         Allocated to stack - offset -3
                            339 ;x                         Allocated to registers r2 
                            340 ;------------------------------------------------------------
                            341 ;src/lcd.c:82: void lcd_goto_xy (const char x, const char y) reentrant
                            342 ;	-----------------------------------------
                            343 ;	 function lcd_goto_xy
                            344 ;	-----------------------------------------
   004A                     345 _lcd_goto_xy:
   004A C0*00               346 	push	_bp
   004C 85 81*00            347 	mov	_bp,sp
                            348 ;     genReceive
   004F AA 82               349 	mov	r2,dpl
                            350 ;src/lcd.c:84: if (y == 0)
                            351 ;     genCmpEq
   0051 E5*00               352 	mov	a,_bp
   0053 24 FD               353 	add	a,#0xfd
   0055 F8                  354 	mov	r0,a
                            355 ;       Peephole 112.b  changed ljmp to sjmp
                            356 ;       Peephole 199    optimized misc jump sequence
   0056 B6 00 10            357 	cjne    @r0,#0x00,00102$
                            358 ;00107$:
                            359 ;       Peephole 200    removed redundant sjmp
   0059                     360 00108$:
                            361 ;src/lcd.c:86: lcd_put_command(x+0x80);
                            362 ;     genPlus
   0059 74 80               363 	mov	a,#0x80
                            364 ;       Peephole 236.a  used r2 instead of ar2
   005B 2A                  365 	add     a,r2
   005C F5 82               366 	mov	dpl,a
                            367 ;     genIpush
   005E 74 01               368 	mov	a,#0x01
   0060 C0 E0               369 	push	acc
                            370 ;     genCall
   0062 12s00r82            371 	lcall	_lcd_put
   0065 15 81               372 	dec	sp
                            373 ;       Peephole 112.b  changed ljmp to sjmp
   0067 80 13               374 	sjmp    00104$
   0069                     375 00102$:
                            376 ;src/lcd.c:90: lcd_put_command(x+0x80+0x40);
                            377 ;     genCast
   0069 EA                  378 	mov	a,r2
   006A 33                  379 	rlc	a
   006B 95 E0               380 	subb	a,acc
   006D FB                  381 	mov	r3,a
                            382 ;     genCast
                            383 ;     genPlus
   006E 74 C0               384 	mov	a,#0xC0
                            385 ;       Peephole 236.a  used r2 instead of ar2
   0070 2A                  386 	add     a,r2
   0071 F5 82               387 	mov	dpl,a
                            388 ;     genIpush
   0073 74 01               389 	mov	a,#0x01
   0075 C0 E0               390 	push	acc
                            391 ;     genCall
   0077 12s00r82            392 	lcall	_lcd_put
   007A 15 81               393 	dec	sp
   007C                     394 00104$:
   007C 85*00 81            395 	mov	sp,_bp
   007F D0*00               396 	pop	_bp
   0081 22                  397 	ret
                            398 ;------------------------------------------------------------
                            399 ;Allocation info for local variables in function 'lcd_put'
                            400 ;------------------------------------------------------------
                            401 ;command                   Allocated to stack - offset -3
                            402 ;value                     Allocated to registers r2 
                            403 ;------------------------------------------------------------
                            404 ;src/lcd.c:94: void lcd_put ( char value, BOOL command ) reentrant
                            405 ;	-----------------------------------------
                            406 ;	 function lcd_put
                            407 ;	-----------------------------------------
   0082                     408 _lcd_put:
   0082 C0*00               409 	push	_bp
   0084 85 81*00            410 	mov	_bp,sp
                            411 ;     genReceive
   0087 AA 82               412 	mov	r2,dpl
                            413 ;src/lcd.c:96: if ( command ) 
                            414 ;     genIfx
   0089 E5*00               415 	mov	a,_bp
   008B 24 FD               416 	add	a,#0xfd
   008D F8                  417 	mov	r0,a
   008E E6                  418 	mov	a,@r0
                            419 ;     genIfxJump
                            420 ;       Peephole 110    removed ljmp by inverse jump logic
   008F 60 2B               421 	jz      00102$
   0091                     422 00107$:
                            423 ;src/lcd.c:98: LCD_CTRL_PORT = (( value >> 4 ) & 0x0f ) | LCD_CTRL_PORT&0x80;
                            424 ;     genRightShift
                            425 ;     genSignedRightShift
                            426 ;     genRightShiftLiteral
                            427 ;     genrshOne
   0091 EA                  428 	mov	a,r2
   0092 C4                  429 	swap	a
   0093 54 0F               430 	anl	a,#0x0f
   0095 30 E3 02            431 	jnb	acc.3,00108$
   0098 44 F0               432 	orl	a,#0xf0
   009A                     433 00108$:
   009A FB                  434 	mov	r3,a
                            435 ;     genAnd
   009B 53 03 0F            436 	anl	ar3,#0x0F
                            437 ;     genAnd
   009E 74 80               438 	mov	a,#0x80
   00A0 55 A0               439 	anl	a,_P2
                            440 ;     genOr
   00A2 4B                  441 	orl	a,r3
   00A3 F5 A0               442 	mov	_P2,a
                            443 ;src/lcd.c:99: enable();
                            444 ;     genCall
   00A5 C0 02               445 	push	ar2
   00A7 12s00r2F            446 	lcall	_enable
   00AA D0 02               447 	pop	ar2
                            448 ;src/lcd.c:100: LCD_CTRL_PORT = ( value & 0x0f ) | LCD_CTRL_PORT&0x80;
                            449 ;     genAnd
   00AC 74 0F               450 	mov	a,#0x0F
   00AE 5A                  451 	anl	a,r2
   00AF FB                  452 	mov	r3,a
                            453 ;     genAnd
   00B0 74 80               454 	mov	a,#0x80
   00B2 55 A0               455 	anl	a,_P2
                            456 ;     genOr
   00B4 4B                  457 	orl	a,r3
   00B5 F5 A0               458 	mov	_P2,a
                            459 ;src/lcd.c:101: enable();
                            460 ;     genCall
   00B7 12s00r2F            461 	lcall	_enable
                            462 ;       Peephole 112.b  changed ljmp to sjmp
   00BA 80 30               463 	sjmp    00104$
   00BC                     464 00102$:
                            465 ;src/lcd.c:105: LCD_CTRL_PORT = ( ( value >> 4 ) & 0x0f ) | LCD_RS_BIT_MASK | LCD_CTRL_PORT&0x80;
                            466 ;     genRightShift
                            467 ;     genSignedRightShift
                            468 ;     genRightShiftLiteral
                            469 ;     genrshOne
   00BC EA                  470 	mov	a,r2
   00BD C4                  471 	swap	a
   00BE 54 0F               472 	anl	a,#0x0f
   00C0 30 E3 02            473 	jnb	acc.3,00109$
   00C3 44 F0               474 	orl	a,#0xf0
   00C5                     475 00109$:
   00C5 FB                  476 	mov	r3,a
                            477 ;     genAnd
   00C6 74 0F               478 	mov	a,#0x0F
   00C8 5B                  479 	anl	a,r3
                            480 ;     genOr
   00C9 44 40               481 	orl	a,#0x40
   00CB FB                  482 	mov	r3,a
                            483 ;     genAnd
   00CC 74 80               484 	mov	a,#0x80
   00CE 55 A0               485 	anl	a,_P2
                            486 ;     genOr
   00D0 4B                  487 	orl	a,r3
   00D1 F5 A0               488 	mov	_P2,a
                            489 ;src/lcd.c:106: enable();
                            490 ;     genCall
   00D3 C0 02               491 	push	ar2
   00D5 12s00r2F            492 	lcall	_enable
   00D8 D0 02               493 	pop	ar2
                            494 ;src/lcd.c:107: LCD_CTRL_PORT = ( value & 0x0f ) | LCD_RS_BIT_MASK | LCD_CTRL_PORT&0x80;
                            495 ;     genAnd
   00DA 74 0F               496 	mov	a,#0x0F
   00DC 5A                  497 	anl	a,r2
                            498 ;     genOr
   00DD 44 40               499 	orl	a,#0x40
   00DF FA                  500 	mov	r2,a
                            501 ;     genAnd
   00E0 74 80               502 	mov	a,#0x80
   00E2 55 A0               503 	anl	a,_P2
                            504 ;     genOr
   00E4 4A                  505 	orl	a,r2
   00E5 F5 A0               506 	mov	_P2,a
                            507 ;src/lcd.c:108: enable();
                            508 ;     genCall
   00E7 12s00r2F            509 	lcall	_enable
                            510 ;src/lcd.c:109: LCD_RS_BIT = 0;
                            511 ;     genAssign
   00EA C2 A6               512 	clr	_P2_6
   00EC                     513 00104$:
   00EC 85*00 81            514 	mov	sp,_bp
   00EF D0*00               515 	pop	_bp
   00F1 22                  516 	ret
                            517 ;------------------------------------------------------------
                            518 ;Allocation info for local variables in function 'lcd_clear'
                            519 ;------------------------------------------------------------
                            520 ;------------------------------------------------------------
                            521 ;src/lcd.c:119: void lcd_clear ( void ) 
                            522 ;	-----------------------------------------
                            523 ;	 function lcd_clear
                            524 ;	-----------------------------------------
   00F2                     525 _lcd_clear:
   00F2 C0*00               526 	push	_bp
   00F4 85 81*00            527 	mov	_bp,sp
                            528 ;src/lcd.c:121: lcd_put_command( LCD_CLEAR );
                            529 ;     genIpush
   00F7 74 01               530 	mov	a,#0x01
   00F9 C0 E0               531 	push	acc
                            532 ;     genCall
   00FB 75 82 01            533 	mov	dpl,#0x01
   00FE 12s00r82            534 	lcall	_lcd_put
   0101 15 81               535 	dec	sp
   0103                     536 00101$:
   0103 85*00 81            537 	mov	sp,_bp
   0106 D0*00               538 	pop	_bp
   0108 22                  539 	ret
                            540 ;------------------------------------------------------------
                            541 ;Allocation info for local variables in function 'lcd_home'
                            542 ;------------------------------------------------------------
                            543 ;------------------------------------------------------------
                            544 ;src/lcd.c:131: void lcd_home ( void ) 
                            545 ;	-----------------------------------------
                            546 ;	 function lcd_home
                            547 ;	-----------------------------------------
   0109                     548 _lcd_home:
   0109 C0*00               549 	push	_bp
   010B 85 81*00            550 	mov	_bp,sp
                            551 ;src/lcd.c:133: lcd_put_command( LCD_HOME );
                            552 ;     genIpush
   010E 74 01               553 	mov	a,#0x01
   0110 C0 E0               554 	push	acc
                            555 ;     genCall
   0112 75 82 02            556 	mov	dpl,#0x02
   0115 12s00r82            557 	lcall	_lcd_put
   0118 15 81               558 	dec	sp
   011A                     559 00101$:
   011A 85*00 81            560 	mov	sp,_bp
   011D D0*00               561 	pop	_bp
   011F 22                  562 	ret
                            563 ;------------------------------------------------------------
                            564 ;Allocation info for local variables in function 'putchar'
                            565 ;------------------------------------------------------------
                            566 ;c                         Allocated to registers 
                            567 ;------------------------------------------------------------
                            568 ;src/lcd.c:136: void putchar(char c) 
                            569 ;	-----------------------------------------
                            570 ;	 function putchar
                            571 ;	-----------------------------------------
   0120                     572 _putchar:
   0120 C0*00               573 	push	_bp
   0122 85 81*00            574 	mov	_bp,sp
                            575 ;     genReceive
                            576 ;src/lcd.c:138: lcd_put_char(c);
                            577 ;     genIpush
                            578 ;       Peephole 181    changed mov to clr
   0125 E4                  579 	clr     a
   0126 C0 E0               580 	push	acc
                            581 ;     genCall
   0128 12s00r82            582 	lcall	_lcd_put
   012B 15 81               583 	dec	sp
   012D                     584 00101$:
   012D 85*00 81            585 	mov	sp,_bp
   0130 D0*00               586 	pop	_bp
   0132 22                  587 	ret
                            588 ;------------------------------------------------------------
                            589 ;Allocation info for local variables in function 'lcd_put_string'
                            590 ;------------------------------------------------------------
                            591 ;value                     Allocated to registers r2 r3 r4 
                            592 ;i                         Allocated to registers 
                            593 ;------------------------------------------------------------
                            594 ;src/lcd.c:141: void lcd_put_string(const char *value) reentrant
                            595 ;	-----------------------------------------
                            596 ;	 function lcd_put_string
                            597 ;	-----------------------------------------
   0133                     598 _lcd_put_string:
   0133 C0*00               599 	push	_bp
   0135 85 81*00            600 	mov	_bp,sp
                            601 ;     genReceive
   0138 AA 82               602 	mov	r2,dpl
   013A AB 83               603 	mov	r3,dph
   013C AC F0               604 	mov	r4,b
                            605 ;src/lcd.c:145: for(i=0; i<strlen(value); i++)
                            606 ;     genAssign
   013E 7D 00               607 	mov	r5,#0x00
   0140                     608 00101$:
                            609 ;     genCall
   0140 8A 82               610 	mov	dpl,r2
   0142 8B 83               611 	mov	dph,r3
   0144 8C F0               612 	mov	b,r4
   0146 C0 02               613 	push	ar2
   0148 C0 03               614 	push	ar3
   014A C0 04               615 	push	ar4
   014C C0 05               616 	push	ar5
   014E 12s00r00            617 	lcall	_strlen
   0151 AE 82               618 	mov	r6,dpl
   0153 AF 83               619 	mov	r7,dph
   0155 D0 05               620 	pop	ar5
   0157 D0 04               621 	pop	ar4
   0159 D0 03               622 	pop	ar3
   015B D0 02               623 	pop	ar2
                            624 ;     genCast
   015D 8D 00               625 	mov	ar0,r5
   015F 79 00               626 	mov	r1,#0x00
                            627 ;     genCmpLt
                            628 ;     genCmp
   0161 C3                  629 	clr	c
   0162 E8                  630 	mov	a,r0
   0163 9E                  631 	subb	a,r6
   0164 E9                  632 	mov	a,r1
   0165 64 80               633 	xrl	a,#0x80
   0167 8F F0               634 	mov	b,r7
   0169 63 F0 80            635 	xrl	b,#0x80
   016C 95 F0               636 	subb	a,b
                            637 ;     genIfxJump
                            638 ;       Peephole 108    removed ljmp by inverse jump logic
   016E 50 35               639 	jnc     00105$
   0170                     640 00109$:
                            641 ;src/lcd.c:147: SERVICE_WATCHDOG;
                            642 ;     genAssign
   0170 75 A6 1E            643 	mov	_WDTRST,#0x1E
                            644 ;     genAssign
   0173 75 A6 E1            645 	mov	_WDTRST,#0xE1
                            646 ;src/lcd.c:148: lcd_put_char(value[i]);
                            647 ;     genPlus
                            648 ;       Peephole 236.g  used r5 instead of ar5
   0176 ED                  649 	mov     a,r5
                            650 ;       Peephole 236.a  used r2 instead of ar2
   0177 2A                  651 	add     a,r2
   0178 FE                  652 	mov	r6,a
                            653 ;       Peephole 181    changed mov to clr
   0179 E4                  654 	clr     a
                            655 ;       Peephole 236.b  used r3 instead of ar3
   017A 3B                  656 	addc    a,r3
   017B FF                  657 	mov	r7,a
   017C 8C 00               658 	mov	ar0,r4
                            659 ;     genPointerGet
                            660 ;     genGenPointerGet
   017E 8E 82               661 	mov	dpl,r6
   0180 8F 83               662 	mov	dph,r7
   0182 88 F0               663 	mov	b,r0
   0184 12s00r00            664 	lcall	__gptrget
   0187 FE                  665 	mov	r6,a
                            666 ;     genIpush
   0188 C0 02               667 	push	ar2
   018A C0 03               668 	push	ar3
   018C C0 04               669 	push	ar4
   018E C0 05               670 	push	ar5
                            671 ;       Peephole 181    changed mov to clr
   0190 E4                  672 	clr     a
   0191 C0 E0               673 	push	acc
                            674 ;     genCall
   0193 8E 82               675 	mov	dpl,r6
   0195 12s00r82            676 	lcall	_lcd_put
   0198 15 81               677 	dec	sp
   019A D0 05               678 	pop	ar5
   019C D0 04               679 	pop	ar4
   019E D0 03               680 	pop	ar3
   01A0 D0 02               681 	pop	ar2
                            682 ;src/lcd.c:145: for(i=0; i<strlen(value); i++)
                            683 ;     genPlus
                            684 ;     genPlusIncr
   01A2 0D                  685 	inc	r5
                            686 ;       Peephole 112.b  changed ljmp to sjmp
   01A3 80 9B               687 	sjmp    00101$
   01A5                     688 00105$:
   01A5 85*00 81            689 	mov	sp,_bp
   01A8 D0*00               690 	pop	_bp
   01AA 22                  691 	ret
                            692 ;------------------------------------------------------------
                            693 ;Allocation info for local variables in function 'lcd_cursor_on'
                            694 ;------------------------------------------------------------
                            695 ;------------------------------------------------------------
                            696 ;src/lcd.c:152: void lcd_cursor_on(void)
                            697 ;	-----------------------------------------
                            698 ;	 function lcd_cursor_on
                            699 ;	-----------------------------------------
   01AB                     700 _lcd_cursor_on:
   01AB C0*00               701 	push	_bp
   01AD 85 81*00            702 	mov	_bp,sp
                            703 ;src/lcd.c:154: lcd_put_command( LCD_CONTROL_ON | LCD_DISPLAY_ON | LCD_CURSOR_ON | LCD_BLINK_ON );
                            704 ;     genIpush
   01B0 74 01               705 	mov	a,#0x01
   01B2 C0 E0               706 	push	acc
                            707 ;     genCall
   01B4 75 82 0F            708 	mov	dpl,#0x0F
   01B7 12s00r82            709 	lcall	_lcd_put
   01BA 15 81               710 	dec	sp
   01BC                     711 00101$:
   01BC 85*00 81            712 	mov	sp,_bp
   01BF D0*00               713 	pop	_bp
   01C1 22                  714 	ret
                            715 ;------------------------------------------------------------
                            716 ;Allocation info for local variables in function 'lcd_cursor_off'
                            717 ;------------------------------------------------------------
                            718 ;------------------------------------------------------------
                            719 ;src/lcd.c:157: void lcd_cursor_off(void)
                            720 ;	-----------------------------------------
                            721 ;	 function lcd_cursor_off
                            722 ;	-----------------------------------------
   01C2                     723 _lcd_cursor_off:
   01C2 C0*00               724 	push	_bp
   01C4 85 81*00            725 	mov	_bp,sp
                            726 ;src/lcd.c:159: lcd_put_command( LCD_CONTROL_ON | LCD_DISPLAY_ON );
                            727 ;     genIpush
   01C7 74 01               728 	mov	a,#0x01
   01C9 C0 E0               729 	push	acc
                            730 ;     genCall
   01CB 75 82 0C            731 	mov	dpl,#0x0C
   01CE 12s00r82            732 	lcall	_lcd_put
   01D1 15 81               733 	dec	sp
   01D3                     734 00101$:
   01D3 85*00 81            735 	mov	sp,_bp
   01D6 D0*00               736 	pop	_bp
   01D8 22                  737 	ret
                            738 ;------------------------------------------------------------
                            739 ;Allocation info for local variables in function 'lcd_init'
                            740 ;------------------------------------------------------------
                            741 ;------------------------------------------------------------
                            742 ;src/lcd.c:174: void lcd_init ( void ) 
                            743 ;	-----------------------------------------
                            744 ;	 function lcd_init
                            745 ;	-----------------------------------------
   01D9                     746 _lcd_init:
   01D9 C0*00               747 	push	_bp
   01DB 85 81*00            748 	mov	_bp,sp
                            749 ;src/lcd.c:176: lcd_delay(ENABLE_DELAY_LONG);
                            750 ;     genCall
                            751 ;       Peephole 182.b  used 16 bit load of dptr
   01DE 90 0B B8            752 	mov     dptr,#0x0BB8
   01E1 12s00r00            753 	lcall	_lcd_delay
                            754 ;src/lcd.c:177: LCD_CTRL_PORT = LCD_INIT_FOR_4_BITS;
                            755 ;     genAssign
   01E4 75 A0 03            756 	mov	_P2,#0x03
                            757 ;src/lcd.c:178: enable();
                            758 ;     genCall
   01E7 12s00r2F            759 	lcall	_enable
                            760 ;src/lcd.c:180: lcd_delay(ENABLE_DELAY_LONG);
                            761 ;     genCall
                            762 ;       Peephole 182.b  used 16 bit load of dptr
   01EA 90 0B B8            763 	mov     dptr,#0x0BB8
   01ED 12s00r00            764 	lcall	_lcd_delay
                            765 ;src/lcd.c:181: LCD_CTRL_PORT = LCD_INIT_FOR_4_BITS;
                            766 ;     genAssign
   01F0 75 A0 03            767 	mov	_P2,#0x03
                            768 ;src/lcd.c:182: enable();
                            769 ;     genCall
   01F3 12s00r2F            770 	lcall	_enable
                            771 ;src/lcd.c:184: lcd_delay(ENABLE_DELAY_LONG);
                            772 ;     genCall
                            773 ;       Peephole 182.b  used 16 bit load of dptr
   01F6 90 0B B8            774 	mov     dptr,#0x0BB8
   01F9 12s00r00            775 	lcall	_lcd_delay
                            776 ;src/lcd.c:185: LCD_CTRL_PORT = LCD_INIT_FOR_4_BITS;
                            777 ;     genAssign
   01FC 75 A0 03            778 	mov	_P2,#0x03
                            779 ;src/lcd.c:186: enable();
                            780 ;     genCall
   01FF 12s00r2F            781 	lcall	_enable
                            782 ;src/lcd.c:188: lcd_delay(ENABLE_DELAY_LONG);
                            783 ;     genCall
                            784 ;       Peephole 182.b  used 16 bit load of dptr
   0202 90 0B B8            785 	mov     dptr,#0x0BB8
   0205 12s00r00            786 	lcall	_lcd_delay
                            787 ;src/lcd.c:189: LCD_CTRL_PORT = LCD_FUNCTION_SET; 
                            788 ;     genAssign
   0208 75 A0 02            789 	mov	_P2,#0x02
                            790 ;src/lcd.c:190: enable();
                            791 ;     genCall
   020B 12s00r2F            792 	lcall	_enable
                            793 ;src/lcd.c:192: lcd_delay(ENABLE_DELAY_LONG);
                            794 ;     genCall
                            795 ;       Peephole 182.b  used 16 bit load of dptr
   020E 90 0B B8            796 	mov     dptr,#0x0BB8
   0211 12s00r00            797 	lcall	_lcd_delay
                            798 ;src/lcd.c:194: lcd_put_command( LCD_CONTROL_ON | LCD_DISPLAY_ON );
                            799 ;     genIpush
   0214 74 01               800 	mov	a,#0x01
   0216 C0 E0               801 	push	acc
                            802 ;     genCall
   0218 75 82 0C            803 	mov	dpl,#0x0C
   021B 12s00r82            804 	lcall	_lcd_put
   021E 15 81               805 	dec	sp
                            806 ;src/lcd.c:195: lcd_clear();
                            807 ;     genCall
   0220 12s00rF2            808 	lcall	_lcd_clear
                            809 ;src/lcd.c:196: lcd_home();
                            810 ;     genCall
   0223 12s01r09            811 	lcall	_lcd_home
                            812 ;src/lcd.c:197: lcd_cursor_off();
                            813 ;     genCall
   0226 12s01rC2            814 	lcall	_lcd_cursor_off
                            815 ;src/lcd.c:200: lcd_delay(10000);
                            816 ;     genCall
                            817 ;       Peephole 182.b  used 16 bit load of dptr
   0229 90 27 10            818 	mov     dptr,#0x2710
   022C 12s00r00            819 	lcall	_lcd_delay
   022F                     820 00101$:
   022F 85*00 81            821 	mov	sp,_bp
   0232 D0*00               822 	pop	_bp
   0234 22                  823 	ret
                            824 	.area CSEG    (CODE)
                            825 	.area XINIT   (CODE)
